# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main
pool:
  vmImage: ubuntu-latest
steps:
- task: TerraformInstaller@0
  displayName: "Terraform Install"
  inputs:
    terraformVersion: 'latest'
- task: TerraformCLI@0
  displayName: "Terraform init"
  inputs:
        command: init
        backendType: azurerm
        environmentServiceName: 'danieldubravecdevconnection'
        backendServiceArm: 'danieldubravecdevconnection'
        ensureBackend: true
        backendAzureRmResourceGroupName: $(RESOURCE_GROUP_NAME)
        backendAzureRmResourceGroupLocation: $(LOCATION)
        backendAzureRmStorageAccountName: $(STORAGE_ACCOUNT_NAME)
        backendAzureRmContainerName: $(STORAGE_CONTAINER_NAME)
        backendAzureRmKey: 'tpcpoc.tfstate'
    allowTelemetryCollection: false
- task: TerraformCLI@0
  displayName: "Terraform Validate"
  inputs:
    command: 'validate'
    workingDirectory: '$(System.DefaultWorkingDirectory)/examples'
    allowTelemetryCollection: false
- task: TerraformCLI@0
  displayName: "Terraform Plan"
  inputs:
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)/examples'
    environmentServiceName: 'danieldubravecdevconnection'
    commandOptions: '-out=plan.out'
    allowTelemetryCollection: false
    publishPlanResults: 'TerraformPlanOutput'
- task: TerraformCLI@0
  displayName: "Apply Terraform Plan"
  inputs:
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)/examples'
    environmentServiceName: 'danieldubravecdevconnection'
    commandOptions: '-auto-approve plan.out'
    allowTelemetryCollection: false